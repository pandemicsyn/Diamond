#!/usr/bin/env python

import os
import sys

import pwd
import grp

for path in [
    os.path.join('opt', 'diamond', 'lib'),
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))
]:
    if os.path.exists(os.path.join(path, 'diamond', '__init__.py')):
        sys.path.append(path)
        break

from diamond import *
from diamond.server import Server

import optparse
import signal
import logging.handlers
import configobj

def main():
    # Initialize Options
    parser = optparse.OptionParser()
    parser.add_option("-c", "--configfile", dest="configfile", default="/etc/diamond/diamond.conf", help="config file")
    parser.add_option("-l", "--logfile", dest="logfile", default=None, help="log file")
    parser.add_option("-f", "--foreground", dest="foreground", default=False, action="store_true", help="run in foreground")
    parser.add_option("-p", "--pidfile", dest="pidfile", default=None, help="pid file")
    parser.add_option("-v", "--verbose", dest="verbose", default=False, action="store_true", help="verbose")
    parser.add_option("-r", "--run", dest="collector", default=None, help="run a given collector once and exit")

    # Parse Command Line Args
    (options, args) = parser.parse_args()

    # Initialize Config
    if os.path.exists(options.configfile):
        config = configobj.ConfigObj(os.path.abspath(options.configfile))
        config['configfile'] = options.configfile
    else:
        print >> sys.stderr, "ERROR: Config file: %s does not exist." % (options.configfile)
        parser.print_help(sys.stderr)
        sys.exit(1)

    # Switch user to specified user/group if required
    try:
        if len(config['server']['group']) :
            # Get GID
            gid = grp.getgrnam(config['server']['group']).gr_gid

            if os.getgid() != gid:
                # Set GID
                os.setgid(gid)

        if len(config['server']['user']) :
            # Get UID
            uid = pwd.getpwnam(config['server']['user']).pw_uid

            if os.getuid() != uid:
                # Set UID
                os.setuid(uid)

    except Exception, e:
        print >> sys.stderr, "ERROR: Failed to set UID/GID. %s" % (e)
        sys.exit(1)

    # Initialize Logging
    log = logging.getLogger('diamond')
    log.setLevel(logging.INFO)

    # Configure Logging Format
    formatter = logging.Formatter('[%(asctime)s] [%(threadName)s] %(message)s')

    # Configure Log Stream Handler
    if options.foreground:
        streamHandler = logging.StreamHandler(sys.stdout)
        streamHandler.setFormatter(formatter)
        streamHandler.setLevel(logging.DEBUG)
        log.addHandler(streamHandler)

    # Got Log File Handler log file
    if not options.logfile:
        options.logfile = str(config['server']['log_file'])

    # Attempt to Log File Directory
    logdir = os.path.abspath(os.path.dirname(options.logfile))
    if not os.path.exists(logdir):
        os.mkdir(logdir)

    # Configure Log File handler
    if config['server'].has_key('log_file_days'):
        fileHandler = logging.handlers.TimedRotatingFileHandler(options.logfile, 'midnight', 1, backupCount=int(config['server']['log_file_days']))
    else:
        fileHandler = logging.FileHandler(options.logfile, 'w')

    fileHandler.setFormatter(formatter)
    fileHandler.setLevel(logging.DEBUG)
    log.addHandler(fileHandler)

    # Configure Logging Verbosity
    if options.verbose:
        log.setLevel(logging.DEBUG)

    # Log
    log.info('Changed UID: %d (%s) GID: %d (%s).' % (os.getuid(), config['server']['user'], os.getgid(), config['server']['group']))

    # Initialize Pid file
    if not options.pidfile:
        options.pidfile = str(config['server']['pid_file'])

    # Read existing pid file
    try:
        pf = file(options.pidfile,'r')
        pid = int(pf.read().strip())
        pf.close()
    except IOError:
        pid = None

    # Check existing pid file
    if pid:
        # Check if pid is real
        if not os.path.exists("/".join(["/proc", str(pid), "cmdline"])):
            # Pid is not real
            os.unlink(options.pidfile)
            pid = None
            print >> sys.stderr, "WARN: Bogus pid file was found. I deleted it."
        else:
            print >> sys.stderr, "ERROR: Pidfile already exists. Server already running?"
            sys.exit(1)

    # Detatch Process
    if not options.foreground and not options.collector:

        # Double fork to serverize process
        log.info('Deatching Process.')

        # Fork 1
        try:
            pid = os.fork()
            if pid > 0:
                # Exit first paren
                sys.exit(0)
        except OSError, e:
            print >> sys.stderr, "Failed to fork process." % (e)
            sys.exit(1)
        # Decouple from parent environmen
        os.setsid()
        os.umask(0)
        # Fork 2
        try:
            pid = os.fork()
            if pid > 0:
                # Exit econd paren
                sys.exit(0)
        except OSError, e:
            print >> sys.stderr, "Failed to fork process." % (e)
            sys.exit(1)
        # Close file descriptors so that we can detach
        sys.stdout.close()
        sys.stderr.close()
        sys.stdin.close()
        os.close(0)
        os.close(1)
        os.close(2)

    # Finish Initialize PID file
    if not options.foreground and not options.collector:
        # Write pid file
        pid = str(os.getpid())
        pf = file(options.pidfile,'w+')
        pf.write("%s\n" % pid)
        pf.close()
        # Log
        log.debug("Wrote PID file: %s" % (options.pidfile))

    # Initialize Server
    server = Server(config)

    def sigint_handler(signum, frame):
            # Log
            log.debug("Signal Received: %d" % (signum))
            # Stop Server
            server.stop()
            # Delete Pidfile
            if os.path.exists(options.pidfile):
                os.remove(options.pidfile)
                # Log
                log.debug("Removed PID file: %s" % (options.pidfile))

    # Set the signal handlers
    signal.signal(signal.SIGINT, sigint_handler)
    signal.signal(signal.SIGTERM, sigint_handler)

    if options.collector:
        # Run Server with one collector
        server.run_one(options.collector)
    else:
        # Run Server
        server.run()

if __name__ == "__main__":
    main()
